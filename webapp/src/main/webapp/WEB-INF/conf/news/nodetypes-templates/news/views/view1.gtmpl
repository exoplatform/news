<%
  import org.exoplatform.ecm.jcr.model.VersionNode;

  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.social.core.identity.model.Identity;
  import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
  import org.exoplatform.social.core.service.LinkProvider;


  import org.exoplatform.commons.utils.CommonsUtils;
  import org.exoplatform.social.webui.Utils;
  import org.exoplatform.social.core.manager.IdentityManager;
  import org.exoplatform.news.service.NewsService;
  

  import javax.jcr.RepositoryException;

  import java.time.format.DateTimeFormatter;
  import java.time.format.FormatStyle;
  import java.time.LocalDateTime;
  import java.util.TimeZone;
  import java.util.Date;
  import java.util.Comparator;

  import groovy.json.JsonOutput;
  import org.exoplatform.services.security.ConversationState;

  public String getProfileFullName(String userName) {
    String profileFullName = "";
    org.exoplatform.social.core.identity.model.Identity identity = org.exoplatform.social.webui.Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME, userName, true);
    if(identity != null && identity.getProfile() != null) {
      profileFullName = identity.getProfile().getFullName();
    }
    return profileFullName;
  }

  private Date getPublicationDate(def node) throws RepositoryException {
    def originalNode = node;
    if (node.isNodeType("nt:frozenNode")) {
      String uuid = node.getProperty("jcr:frozenUuid").getString();
      originalNode = node.getSession().getNodeByUUID(uuid);
    }
    VersionNode versionNode = new VersionNode(originalNode, originalNode.getSession());
    List<VersionNode> versions = versionNode.getChildren();
    if(versions.size() > 0) {
      versions.sort(new Comparator<VersionNode>() {
        @Override
        public int compare(VersionNode o1, VersionNode o2) {
          return Integer.parseInt(o1.getName()) - Integer.parseInt(o2.getName());
        }
      });
      return versions.get(0).getCreatedTime().getTime();
    }

    return null;
  }

  NewsService newsService = CommonsUtils.getService(NewsService.class);

  def pcontext = Util.getPortalRequestContext();

  def newsNode = uicomponent.getNode();
  
  def currentIdentity = ConversationState.getCurrent().getIdentity();

  def news = newsService.getNewsById(newsNode.getUUID(), currentIdentity, false);

  if(news.archived && !news.canArchive) {

%>

  <div>
    <div class="userNotAuthorized">
      <div class="notAuthorizedIconDiv">
        <img src="/news/images/notauthorized.png" class="iconNotAuthorized">
      </div>
      <h3><%=_ctx.appRes("news.archive.text")%></h3>
    </div>
  </div>

<%
  } else {
    String illustrationURL = "";
    if(news.illustrationURL != null) {
      illustrationURL = new StringBuilder("/rest/v1/news/").append(news.id).append("/illustration").toString();
    }

    def activityId = "";
    if (news.activities) {
      def originalSpaceIdActivityId = news.activities.split(";")[0];
      if (originalSpaceIdActivityId != null) {
        def originalActivityId = originalSpaceIdActivityId.split(":")[1];
        if (originalActivityId != null) {
          activityId = originalActivityId;
        }
      }
    }

    def authorFullName = getProfileFullName(news.author);
    def updaterFullName = news.author.equals(news.updater) ? authorFullName : getProfileFullName(news.updater);
    def authorProfileURL = LinkProvider.getUserProfileUri(news.author);
    def updaterProfileURL = news.author.equals(news.updater) ? authorProfileURL : LinkProvider.getUserProfileUri(news.updater);
    def ownerAvatar = new StringBuilder("/portal/rest/v1/social/users/").append(news.author).append("/avatar").toString();
    def spaceName = news.spaceDisplayName;

    def mediumDateFormat = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(pcontext.getLocale());

    def newsPostedDate = "";
    def newsPublicationDate = getPublicationDate(newsNode);
    if(newsPublicationDate != null) {
      def postedDate = LocalDateTime.ofInstant(newsPublicationDate.toInstant(), TimeZone.getDefault().toZoneId());
      newsPostedDate = postedDate.format(mediumDateFormat);
    }
    def updatedDate = LocalDateTime.ofInstant(news.updateDate.toInstant(), TimeZone.getDefault().toZoneId());
    def newsUpdatedDate = updatedDate.format(mediumDateFormat);
    if(news.updateDate != null && newsPublicationDate != null && news.updateDate.getTime() == newsPublicationDate.getTime()){
      newsUpdatedDate = null;
    }
    def newsTitle = news.title.replaceAll("'", "\\\\'").replaceAll("</script", "</scr\\\\ipt");
    def newsSummary = news.summary.replaceAll("`", "\\\\`").replaceAll("</script", "</scr\\\\ipt");
    def newsBody = news.body.replaceAll("`", "\\\\`");
    def newsAttachments = news.attachments;

    def hiddenSpace = news.hiddenSpace;

    def params = """ {
      activityId: '${activityId}',
      newsId: '${news.id}',
      news: {
        title: "${newsTitle}",
        summary: `${newsSummary}`,
        published: ${news.published},
        body: `${newsBody}`,
        illustrationURL: '${illustrationURL}',
        attachments: ${JsonOutput.toJson(newsAttachments)},
        authorFullName: '${authorFullName}',
        authorProfileURL: '${authorProfileURL}',
        postedDate: '${newsPostedDate}',
        updaterFullName: '${updaterFullName}',
        updaterProfileURL: '${updaterProfileURL}',
        updatedDate: '${newsUpdatedDate}',
        newsId: '${news.id}',
        archived: ${news.archived},
        canArchive: ${news.canArchive},
        canEdit: ${news.canEdit},
        canPublish: ${news.canPublish},
        profileAvatarURL: '${ownerAvatar}',
        spaceDisplayName: "${spaceName}",
        spaceUrl:'${news.spaceUrl}',
        spaceAvatarUrl: '${news.spaceAvatarUrl}',
        url: '${news.url}',
        activityId: '${activityId}',
        hiddenSpace: ${news.hiddenSpace},
        isSpaceMember: ${news.isSpaceMember},
      },
    } """
    def notAuthorizedUserLabel = "";
    if( hiddenSpace ){
      notAuthorizedUserLabel = _ctx.appRes("news.activity.notAuthorizedUserForSpaceHidden");
    }else {
      notAuthorizedUserLabel = _ctx.appRes("news.activity.notAuthorizedUser").replace("{0}",spaceName);
    }



    def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");
    jsManager.require("SHARED/jquery", "jq")
               .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
               .require("SHARED/newsDetails", "newsDetails").addScripts("newsDetails.init($params);");
%>

  <div>
    <!-- The following bloc is needed in order to display the publish confirmation popup when acceding to news details from news app -->
    <!--begin -->
    <div class="uiPopupWrapper UISocialConfirmation" style="display: none;">
      <div class="UIPopupWindow UIDragObject uiPopup " style="width: 550px;">
        <div class="popupHeader clearfix">
          <a class="uiIconClose pull-right" title="Close"></a>
          <span class="PopupTitle popupTitle"></span>
        </div>
        <div class="PopupContent popupContent">
          <ul class="singleMessage popupMessage resizable">
            <li>
              <span class="confirmationIcon contentMessage"></span>
            </li>
          </ul>
          <div class="uiAction uiActionBorder"></div>
        </div>
      </div>
    </div>
    <!-- end -->
    <div class="notMemberUser">
    <div id="newsDetailsApp"></div>
    </div>

    <div class="notAuthorizedUser">
      <div class="notAuthorizedMessage">
        <div class="alert alert-info" id="">
            <p> <%= notAuthorizedUserLabel %></p>
        </div>
      </div>
    </div>
  </div>

<% } %>