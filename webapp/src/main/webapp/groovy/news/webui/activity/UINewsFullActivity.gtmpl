<!-- Full details news Activity -->
<%
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.webui.form.UIFormTextAreaInput;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.exoplatform.social.core.space.model.Space;
  import org.exoplatform.social.webui.Utils;

  import org.apache.commons.lang.StringEscapeUtils;

  import static org.exoplatform.social.webui.activity.BaseUIActivity.TEMPLATE_PARAM_COMMENT;

  import org.exoplatform.services.security.ConversationState;
  import org.exoplatform.social.core.manager.IdentityManager;
  import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
  import org.exoplatform.social.core.identity.model.Identity;

  import java.time.format.DateTimeFormatter;
  import java.time.format.FormatStyle;
  import java.time.LocalDateTime;
  import java.util.TimeZone;

  import groovy.json.JsonOutput;

  def pcontext = Util.getPortalRequestContext();

  def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");

  def activity = uicomponent.getActivity();
  def news = uicomponent.getNews();

 if (activity && news) {

   if(news.archived && !news.canArchive) {

%>

  <div>
    <div class="userNotAuthorized">
      <div class="notAuthorizedIconDiv">
        <img src="/news/images/notauthorized.png" class="iconNotAuthorized">
      </div>
      <h3><%=_ctx.appRes("news.archive.text")%></h3>
    </div>
  </div>

<%

  } else {

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");

  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment").replace("'", "\\'");

  int allCommentSize = uicomponent.getAllCommentSize();

  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();

  def placeholder = _ctx.appRes("UIActivity.comment.placeholder").replace("'", "\\'");

  // labels
  def LikePopupTitleLabel = _ctx.appRes("UIActivity.title.PopupCommentLikers");
  def IgnoreLabel = _ctx.appRes("UserProfilePopup.label.Ignore");
  def ConnectLabel = _ctx.appRes("UserProfilePopup.label.Connect");
  def ConfirmLabel = _ctx.appRes("UserProfilePopup.label.Confirm");
  def CancelRequestLabel = _ctx.appRes("UserProfilePopup.label.CancelRequest");
  def RemoveConnectionLabel = _ctx.appRes("UserProfilePopup.label.RemoveConnection");
  def labels = """ {
    LikePopupTitle: '$LikePopupTitleLabel',
    Connect: '$ConnectLabel',
    Confirm: '$ConfirmLabel',
    CancelRequest: '$CancelRequestLabel',
    RemoveConnection: '$RemoveConnectionLabel',
    Ignore: '$IgnoreLabel'
  }"""

  def authorFullName = uicomponent.getUserFullName(news.author);
  def updaterFullName = uicomponent.getUserFullName(news.updater);
  def authorProfileURL = uicomponent.getUserProfileURL(news.author);
  def updaterProfileURL = uicomponent.getUserProfileURL(news.updater);
  def ownerAvatar = new StringBuilder("/portal/rest/v1/social/users/").append(news.author).append("/avatar").toString();

  def mediumDateFormat = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(pcontext.getLocale());
  def newsPostedDate = "";
  if(news.publicationDate != null) {
    def postedDate = LocalDateTime.ofInstant(news.publicationDate.toInstant(), TimeZone.getDefault().toZoneId());
    newsPostedDate = postedDate.format(mediumDateFormat);
  }
  def newsUpdatedDate = null;
  if( news.updateDate == null || news.publicationDate == null || news.publicationDate.equals(news.updateDate) ){
    newsUpdatedDate = null;
  } else {
    def updatedDate = LocalDateTime.ofInstant(news.updateDate.toInstant(), TimeZone.getDefault().toZoneId());
    newsUpdatedDate = updatedDate.format(mediumDateFormat);
  }
  def labelReadMore = _ctx.appRes("news.activity.readMore");
  def labelPublicationDate = _ctx.appRes("news.activity.publicationDate");

  def spaceGroupId = uicomponent.getSpaceGroupId();

  def activityLink = uicomponent.getActivityPermalink(activity.id);

  String illustrationURL = "";
  if(news.illustrationURL != null) {
    illustrationURL = new StringBuilder("/rest/v1/news/").append(news.id).append("/illustration").toString();
  }

  def newsTitle = news.title.replaceAll("'", "\\\\'").replaceAll("</script", "</scr\\\\ipt");
  def newsSummary = news.summary.replaceAll("`", "\\\\`").replaceAll("</script", "</scr\\\\ipt");
  def newsBody = news.body.replaceAll("`", "\\\\`");

  def showEditButton = uicomponent.canEditNews(activity);
  def showPinInput = uicomponent.canPinNews(activity);


  //params for init UIActivity javascript object
  def params = """ {
    activityId: '${activity.id}',
    newsId: '${news.id}',
    spaceGroupId: '$spaceGroupId',
    placeholderComment: '${placeholder}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    allCommentSize: '${allCommentSize}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}',
    labels: $labels,
    nodeNewsId: '${news.id}',
    news: {
      title: `${newsTitle}`,
      summary: `${newsSummary}`,
      body: `${newsBody}`,
      pinned: ${news.pinned},
      illustrationURL: '${illustrationURL}',
      attachments: ${JsonOutput.toJson(news.attachments)},
      authorFullName: '${authorFullName}',
      authorProfileURL: '${authorProfileURL}',
      postedDate: '${newsPostedDate}',
      updaterFullName: '${updaterFullName}',
      updaterProfileURL: '${updaterProfileURL}',
      updatedDate: '${newsUpdatedDate}',
      titleLink: '${activityLink}',
      viewsCount: ${news.viewsCount},
      newsId: '${news.id}',
      archived: ${news.archived},
      canArchive: ${news.canArchive},
      canDelete: ${news.canDelete},
      profileAvatarURL: '${ownerAvatar}',
      spaceDisplayName: "${news.spaceDisplayName}",
      spaceUrl:'${news.spaceUrl}',
      spaceAvatarUrl: '${news.spaceAvatarUrl}',
      url: '${news.url}',
      hiddenSpace: ${news.hiddenSpace},
    },
    showShareButton: true,
    showEditButton: $showEditButton,
    showPinInput: $showPinInput,
  } """

  jsManager.require("SHARED/jquery", "jq")
           .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
           .require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);")
           .require("SHARED/newsDetails", "newsDetails").addScripts("newsDetails.init($params);");

  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);
%>
<div class="VuetifyApp">
  <div class="activityStream uiActivityStreamWrapper uiNewsActivity" id="activityContainer${activity.id}">
    <% uiform.begin() %>
    <div class="boxContainer" id="boxContainer">
    <div id="ContextBox${activity.id}" class="uiBox contentBox clearfix">
      <div id="ActivityContextBox${activity.id}">

       <div id="newsDetails">
         <v-cacheable-dom-app cache-id="newsDetails_${activity.id}"></v-cacheable-dom-app>
       </div>
        <% if (!news.archived || (news.archived && news.canArchive)) { %>
        <div class="actionsDetailsWrapper">
          <% _ctx.includeTemplates("UIActivityListLiked") %>
          <% _ctx.includeTemplates("UIActivityNewsActionBar-actions") %>
        </div><!--end actionBar and list like people wrapper-->
        <%}%>
      <% _ctx.includeTemplates("UIActivityCommentBox") %>
      </div><!--end #ActivityContextBox${activity.id}-->
    </div> <!--end ContextBox${activity.id}-->
    </div> <!-- #boxContainer-->
    <% if (!news.archived || (news.archived && news.canArchive)) {
      uiform.end()
    }%>
  </div>
  </div><!--activityStream-->
  <% } // News archived %>
  <% } %>
