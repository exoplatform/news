<!-- Full details news Activity -->
<%
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.webui.form.UIFormTextAreaInput;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.exoplatform.social.core.space.model.Space;
  import org.exoplatform.social.webui.Utils;

  import org.apache.commons.lang.StringEscapeUtils;

  import static org.exoplatform.social.webui.activity.BaseUIActivity.TEMPLATE_PARAM_COMMENT;

  import org.exoplatform.services.security.ConversationState;
  import org.exoplatform.social.core.manager.IdentityManager;
  import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
  import org.exoplatform.social.core.identity.model.Identity;

  import java.time.format.DateTimeFormatter;
  import java.time.format.FormatStyle;
  import java.time.LocalDateTime;
  import java.util.TimeZone;

  import java.util.Date;

  import groovy.json.JsonOutput;

  def pcontext = Util.getPortalRequestContext();

  def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");

  def activity = uicomponent.getActivity();

  def sharedTitle = activity.title;

  def streamOwner = activity.getStreamOwner();

  def news = uicomponent.getNews();

if (activity && news) {

   if(news.archived && !news.canArchive) {

%>

  <div>
    <div class="userNotAuthorized">
      <div class="notAuthorizedIconDiv">
        <img src="/news/images/notauthorized.png" class="iconNotAuthorized">
      </div>
      <h3><%=_ctx.appRes("news.archive.text")%></h3>
    </div>
  </div>

<%

  } else {

  def sharedActivityId = uicomponent.getSharedActivityId();

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");

  def labelComment = _ctx.appRes("UIActivity.label.Comment");
  def labelCancel = _ctx.appRes("UIActivity.label.Cancel");
  def labelLike = _ctx.appRes("UIActivity.label.Like");
  def labelUpdate = _ctx.appRes("UIActivity.label.Update");
  def labelEdit = _ctx.appRes("UIActivity.label.Edit");
  def labelDelete = _ctx.appRes("UIActivity.label.Delete");
  def labelViewAllReplies = _ctx.appRes("UIActivity.label.ViewAllReplies");
  def labelUnlike = _ctx.appRes("UIActivity.label.Unlike");
  def labelSource = _ctx.appRes("UIActivity.label.Source");
  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment").replace("'", "\\'");
  def labelShowAllComments = _ctx.appRes("UIActivity.label.Show_All_Comments");
  def labelHideAllComments = _ctx.appRes("UIActivity.label.Hide_All_Comments");
  def labelShowPreviousComments = _ctx.appRes("UIActivity.label.Show_Previous_Comments");

  def labelOnePersonLikeThis=_ctx.appRes("UIActivity.label.One_Person_Like_This");
  def labelTwoPersonLikeThis=_ctx.appRes("UIActivity.label.Two_Person_Like_This");
  def labelOneAndOthersLikeThis=_ctx.appRes("UIActivity.label.One_And_Others_Like_This");
  def labelYouLikeThis=_ctx.appRes("UIActivity.label.You_Like_This");
  def labelYouAndOnePersonLikeThis=_ctx.appRes("UIActivity.label.You_And_One_Person_Like_This");
  def labelYouAndOthersLikeThis=_ctx.appRes("UIActivity.label.You_And_Others_Like_This");

  def captionConfirmation=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirmation"));
  def labelToDeleteThisActivity=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Activity"));
  def labelConfirmbutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirm_Delete_Activity-Button"));
  def labelClosebutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Cancel_Delete_Activity-Button"));
  def labelToDeleteThisComment=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Comment"));

  def likeActivityAction = uicomponent.event("LikeActivity", "true");
  def unlikeActivityAction = uicomponent.event("LikeActivity", "false");

  def commentList = uicomponent.getComments();
  int allCommentSize = uicomponent.getAllCommentSize();
  if (allCommentSize > 0) {
    labelShowAllComments = labelShowAllComments.replace("{0}", allCommentSize + "");
    labelHideAllComments = labelHideAllComments.replace("{0}", allCommentSize + "");

  }

  def parentCommentsSize = uicomponent.getParentCommentsSize(commentList);
  def commentsHidden = allCommentSize-parentCommentsSize;
  def displayedIdentityLikes = uicomponent.getDisplayedIdentityLikes();
  def identityLikesNum = 0;
  def totalLikesNum = uicomponent.getIdentityLikes().length;
  def labelLikes = null;
  def loadLikesAction = uicomponent.event("LoadLikes");
  if (displayedIdentityLikes != null) {
    identityLikesNum = displayedIdentityLikes.length;
  }

  def commentListStatus = uicomponent.getCommentListStatus();
  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();
  def likesDisplayed = uicomponent.isAllLoaded();

  def placeholder = _ctx.appRes("UIActivity.comment.placeholder").replace("'", "\\'");

  // labels
  def LikePopupTitleLabel = _ctx.appRes("UIActivity.title.PopupCommentLikers");
  def IgnoreLabel = _ctx.appRes("UserProfilePopup.label.Ignore");
  def ConnectLabel = _ctx.appRes("UserProfilePopup.label.Connect");
  def ConfirmLabel = _ctx.appRes("UserProfilePopup.label.Confirm");
  def CancelRequestLabel = _ctx.appRes("UserProfilePopup.label.CancelRequest");
  def RemoveConnectionLabel = _ctx.appRes("UserProfilePopup.label.RemoveConnection");
  def labels = """ {
    LikePopupTitle: '$LikePopupTitleLabel',
    Connect: '$ConnectLabel',
    Confirm: '$ConfirmLabel',
    CancelRequest: '$CancelRequestLabel',
    RemoveConnection: '$RemoveConnectionLabel',
    Ignore: '$IgnoreLabel'
  }"""

  def authorFullName = uicomponent.getUserFullName(news.author);
  def updaterFullName = uicomponent.getUserFullName(news.updater);
  def posterFullName = uicomponent.getPosterFullName();
  def sharerUserName = uicomponent.getPosterUserName();
  def sharerAvatar = new StringBuilder("/portal/rest/v1/social/users/").append(sharerUserName).append("/avatar").toString();
  def sharingUrl = uicomponent.getPosterUrl();
  def authorProfileURL = uicomponent.getUserProfileURL(news.author);
  def updaterProfileURL = uicomponent.getUserProfileURL(news.updater);
  def ownerAvatar = new StringBuilder("/portal/rest/v1/social/users/").append(news.author).append("/avatar").toString();

  def mediumDateFormat = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(pcontext.getLocale());
  def newsPostedDate = "";
  if(news.publicationDate != null) {
    def postedDate = LocalDateTime.ofInstant(news.publicationDate.toInstant(), TimeZone.getDefault().toZoneId());
    newsPostedDate = postedDate.format(mediumDateFormat);
  }
  def updatedDate = LocalDateTime.ofInstant(news.updateDate.toInstant(), TimeZone.getDefault().toZoneId());
  def newsUpdatedDate = updatedDate.format(mediumDateFormat);
  def showUpdateInfo = !newsPostedDate.equals(updatedDate);
  if( news.updateDate.getTime() == news.publicationDate.getTime() ){
    newsUpdatedDate = null;
  }

  def labelReadMore = _ctx.appRes("news.activity.readMore");
  def labelPublicationDate = _ctx.appRes("news.activity.publicationDate");

  def spaceGroupId = uicomponent.getSpaceGroupId();
  Space space = Utils.getSpaceService().getSpaceByPrettyName(streamOwner);
  def spaceSharedName = space.getDisplayName();
  def urlSpaceShared = LinkProvider.getSpaceUri(space.url);
  def ownerSpaceAvatar = space.avatarUrl;
  if (!ownerSpaceAvatar) ownerSpaceAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;

  def activityLink = uicomponent.getActivityPermalink(activity.id);

  String illustrationURL = "";
  if(news.illustrationURL != null) {
    illustrationURL = new StringBuilder("/portal/rest/v1/news/").append(news.id).append("/illustration").toString();
  }

  def newsTitle = news.title;
  def newsSummary = news.summary;
  def newsBody = news.body;

  //params for init UIActivity javascript object
  def params = """ {
    activityId: '${activity.id}',
    newsId: '${news.id}',
    spaceGroupId: '$spaceGroupId',
    placeholderComment: '${placeholder}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    allCommentSize: '${allCommentSize}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}',
    labels: $labels,
    nodeNewsId: '${news.id}',
     news: {
       title: "${newsTitle}",
       summary: `${newsSummary}`,
       body: `${newsBody}`,
       pinned: ${news.pinned},
       illustrationURL: '${illustrationURL}',
       attachments: ${JsonOutput.toJson(news.attachments)},
       authorFullName: '${authorFullName}',
       authorProfileURL: '${authorProfileURL}',
       postedDate: '${newsPostedDate}',
       updaterFullName: '${updaterFullName}',
       updaterProfileURL: '${updaterProfileURL}',
       updatedDate: '${newsUpdatedDate}',
       titleLink: '${activityLink}',
       viewsCount: ${news.viewsCount},
       newsId: '${news.id}',
       archived: ${news.archived},
       canArchive: ${news.canArchive},
       profileAvatarURL: '${ownerAvatar}',
       spaceDisplayName: '${news.spaceDisplayName}',
       spaceUrl:'${news.spaceUrl}',
       hiddenSpace: ${news.hiddenSpace},
     },
    showShareButton: false,
    showEditButton: false,
    showPinInput: false,
  } """

  jsManager.require("SHARED/jquery", "jq")
           .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
           .require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);")
           .require("SHARED/newsDetails", "newsDetails").addScripts("newsDetails.init($params);");

  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);

  def listPeopleLikeBlockClass = "", listPeopleBGClass = "";

  if (!likesDisplayed) {
    listPeopleLikeBlockClass = "displayNone";
  }

  if (uicomponent.isLiked()) {
    if (totalLikesNum > 2) {
      labelLikes = labelYouAndOthersLikeThis.replace("{0}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 2) {
      def likeId = (displayedIdentityLikes[0] == Utils.getViewerIdentity().getId()) ? displayedIdentityLikes[1] : displayedIdentityLikes[0];
      def id = Utils.getIdentityManager().getIdentity(likeId);
      labelLikes = labelYouAndOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else {
      labelLikes = labelYouLikeThis;
    }
  } else {
    if (totalLikesNum > 2) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOneAndOthersLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName)).replace("{1}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 1) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else if (totalLikesNum == 2) {
      def id1 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      def id2 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[1]);
      labelLikes = labelTwoPersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id1.profile.fullName)).replace("{1}", StringEscapeUtils.escapeHtml(id2.profile.fullName));
    }
  }

  if (!labelLikes) {
   //hides diplayPeopleBG
   listPeopleBGClass = "displayNone";
  }
%>

<div class="activityStream uiNewsActivity" id="activityContainer${activity.id}">
  <% uiform.begin() %>
  <div class="boxContainer" id="boxContainer">
  <div id="ContextBox${activity.id}" class="uiBox contentBox">
    <div id="ActivityContextBox${activity.id}">
    <div class="news-details-shared">
      <div id="newsDetails"></div>
      </div>
    <div class="sharedInfo">
      <div class="newsSpaceAndOwner">
        <div class="newsOwner">
          <div class="avatarCircle avatarUser">
            <a href="$sharingUrl" target="_blank">
              <img src="$sharerAvatar" class="avatar">
            </a>
          </div>
            <div class="userInfo">
              <a href="$sharingUrl" target="_blank"> ${posterFullName} </a>
            </div>
            <div class="createIn">
                <span class="uiIconArrowRightMini uiIconLightGray"></span>
            </div>
              <div class="avatarSpace">
                <a href="$urlSpaceShared" target="_blank">
                  <img src="$ownerSpaceAvatar" class="avatar">
                </a>
              </div>
                <div class="spaceInfo">
                  <a href="$urlSpaceShared" target="_blank"> ${spaceSharedName} </a>
                </div>
             </div>
          </div>
        <div class="titleInfo">
          <p>$sharedTitle</p>
        </div>
    </div>
      <div class="actionBar clearfix ">
      	<%
      	  def toggleDisplayCommentAction = uicomponent.event('ToggleDisplayCommentForm', null, false);
      	  def commentLink = "";
      	%>
      	<ul class="pull-right statusAction">
      	  <li>
      		<a class="$commentLink" id="CommentLink${activity.id}" data-activity="${activity.id}" href="javascript:void(0);">
      		  <i class="uiIconComment uiIconLightGray"></i>&nbsp;$allCommentSize
      		</a>
      	  </li>
      	  <% if (uicomponent.isLiked()) { %>
      		<li>
      		  <a onclick="$unlikeActivityAction" rel="tooltip" data-placement="bottom" title="<%=_ctx.appRes("UIActivity.msg.UnlikeActivity"); %>" id="UnLikeLink${activity.id}" href="javascript:void(0);">
      		    <i class="uiIconThumbUp uiIconBlue"></i>&nbsp;$totalLikesNum
      		  </a>
      		</li>
      	  <% } else { %>
      		<li>
      		  <a onclick="$likeActivityAction" rel="tooltip" data-placement="bottom" title="<%=_ctx.appRes("UIActivity.msg.LikeActivity"); %>" id="LikeLink${activity.id}" href="javascript:void(0);">
      		    <i class="uiIconThumbUp uiIconLightGray"></i>&nbsp;$totalLikesNum
      		  </a>
      		</li>
      	  <% }%>
      	</ul>
      </div><!--end actionBar-->
      <% if (identityLikesNum > 0 || uicomponent.isLiked()) {%>
      	<div class="listLikedBox $listPeopleBGClass">
      	  <div class="listPeopleContent">
      		<% if (!labelLikes) { labelLikes = ""; } %>
      		<p>$labelLikes</p>

      		<% if (identityLikesNum > 0) {%>
      		  <div class="listLiked">
      			<%
      			  displayedIdentityLikes.each({
      			  def id = Utils.getIdentityManager().getIdentity(it);
      			  personLikeFullName = StringEscapeUtils.escapeHtml(id.profile.fullName);
      			  personLikeProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
      			  personLikeAvatarImageSource = id.profile.avatarUrl;
      			  if (!personLikeAvatarImageSource) { personLikeAvatarImageSource = LinkProvider.PROFILE_DEFAULT_AVATAR_URL; }
      			%>
      			<a class="avatarXSmall" title="$personLikeFullName" href="$personLikeProfileUri">
      			  <img src="$personLikeAvatarImageSource" alt="$personLikeFullName" />
      			</a>
      		    <% })%>
                <button onclick="$loadLikesAction" class="btn">...</button>
      	      </div>
      		<% }%>
      	  </div>
      	</div><!--end list like people-->
      <%}%>
      <div id="CommentBlockBound${activity.id}" class="commentBox ">
      	<% if (uicomponent.commentListToggleable()) {
      	  def showAllCommentsAction = uicomponent.event("SetCommentListStatus", "all");
      	  def hideAllCommentsAction = uicomponent.event("SetCommentListStatus", "none");
      	  def loadPreviousCommentsAction = uicomponent.event("SetCommentListStatus", "all");
      	%>
      	  <div class="commentListInfo clearfix">
      	  <div class="pull-right numberComment">$commentsHidden/$allCommentSize</div>
      	  <% if (commentListStatus.getStatus().equals("latest") || commentListStatus.getStatus().equals("none")) { %>
      	    <a onclick="$showAllCommentsAction" href="javascript:void(0);">$labelShowAllComments</a>
      	  <% } else if (commentListStatus.getStatus().equals("all")) { %>
      	    <% if (commentsHidden > 0) { %>
              <a onclick="$loadPreviousCommentsAction" href="javascript:void(0);">$labelShowPreviousComments</a>
            <% } else { %>
              <a onclick="$hideAllCommentsAction" href="javascript:void(0);">$labelHideAllComments</a>
            <% } %>
      	  <% } %>
          </div>
      	<% } %>
      	<div class="commentList">
      	  <%
      		def commenterFullName, commenterProfileUri, commentMessage, commentPostedTime, commenterAvatarImgSrc, commentAbsolutePostedTime;
      		def first = true, commentContentClass;
      		def commentCounter = 0;
            def subCommentSize = 0;
            def subCommentIndex = 0;
            def subCommentClass = "";
            def hideSubComments = true;
            def updatedCommentId = uicomponent.getAndSetUpdatedCommentId(null);
            def showSubComments = false;
            def updatedComment;
            if (updatedCommentId) {
              updatedComment = Utils.getActivityManager().getActivity(updatedCommentId);
            }
      	    commentList.each({
      		  commentCounter++;
      		  if (first & !uicomponent.commentListToggleable()) {
      			commentContentClass = "commentContent";
      		    first = false;
      		  } else {
      			commentContentClass = "";
      		  }
      		  def id = Utils.getIdentityManager().getIdentity(it.userId);
              commenterFullName = StringEscapeUtils.escapeHtml(id.profile.fullName);
              commenterProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
              def commentParentClass = it.parentCommentId == null ? "CommentBlock" : (subCommentClass + " subCommentBlock");
              if(it.parentCommentId == null) {
                subCommentSize = uicomponent.getSubCommentsSize(commentList, it.id);
                subCommentIndex = 0;
                if (updatedCommentId) {
                  if(updatedComment.parentCommentId == it.id || updatedComment.id == it.id){
                    showSubComments = true;
                  } else {
                    showSubComments = false;
                  }
                }
                hideSubComments = subCommentSize > 2 && (updatedCommentId == null || !showSubComments);
                if(hideSubComments){
                  subCommentClass = "hidden";
                } else {
                  subCommentClass = "";
                }
              } else {
                subCommentIndex++;
                if(hideSubComments && subCommentIndex == subCommentSize) {
                %>
                  <div class="commentItem clearfix subCommentBlock subCommentShowAll" id="SubCommentShowAll_$it.parentCommentId">
                    <a href="javascript:void(0)" class="subCommentShowAllLink" data-parent-comment="$it.parentCommentId">
                      <%=labelViewAllReplies.replace("{0}", String.valueOf(subCommentSize))%>
                    </a>
                  </div>
                <%
                }
              }
              commentMessage = it.title;
              commentPostedTime = uicomponent.getRelativeTimeLabel(_ctx, it.postedTime);
              commentEditedTime = uicomponent.getRelativeTimeLabel(_ctx, it.updated.getTime());
              commentEditedTime = _ctx.appRes("UIActivity.label.EditedFrom").replace("{0}",commentEditedTime);
              commentAbsolutePostedTime = uicomponent.getAbsolutePostedTime(it.postedTime);
              commenterAvatarImgSrc = id.profile.avatarUrl;
              if (!commenterAvatarImgSrc) commenterAvatarImgSrc = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
              def commentId = it.parentCommentId == null ? it.id : it.parentCommentId;
              %>
              <div id="commentContainer${it.id}" data-comment-id="$commentId" data-parent-comment="$it.parentCommentId" class="$commentParentClass">
                <% if(commentCounter == commentList.size()) { %>
                  <div id="CommentBlock${activity.id}${commentCounter}" class="commentItem commentItemLast">
                <% } else { %>
                  <div id="CommentBlock${it.id}" class="commentItem">
                <% }  %>
                <div class="commmentLeft">
                  <a href="$commenterProfileUri" title="$commenterFullName" class="avatarXSmall">
                  	<img alt="$commenterFullName" src="$commenterAvatarImgSrc" />
                  </a>
                </div><!--end commentLeft-->
                <div class="commentRight">
                  <div class="author">
              <a href="$commenterProfileUri" target="_blank">$commenterFullName</a>
                  </div>
                  <div class="contentComment" id="${activity.id}-${commentCounter}">
                  	$commentMessage
                  </div>
                  <div class="desktop-input clearfix">
                    <div class="blastInputPeople hideEffect">
                      <div>
                        <textarea class="textarea hideEffect paddingAction" name="composerEditComment${it.id}" id="composerEditComment${it.id}" rows="10" cols="30"></textarea>
                      </div>
                      <div class="uiAction">
                        <button class="btn pull-left btn-primary" data-edit-comment-id="${it.id}" data-edit-comment-activityid="${activity.id}" data-click="<%= uicomponent.event("EditComment","COMMENTID"); %>" id="EditCommentButton${it.id}">${labelUpdate}</button>&nbsp;
                        <button href="javascript:void(0)" data-cancel-edit-comment-id="${it.id}" class="btn pull-left" id="DeleteEditCommentButton${it.id}">${labelCancel}</button>
                      </div>
                    </div>
                  </div>
                  <%
                  	_ctx.put(TEMPLATE_PARAM_COMMENT, it);
                    _ctx.put("authorName", id.remoteId);
                    _ctx.put("authorFullName", commenterFullName);
                  	_ctx.put("activityID", activity.id);
                  	_ctx.put("commentPostedTime", commentPostedTime);
                  	_ctx.put("commentEditedTime", commentEditedTime);
                  	_ctx.put("commentAbsolutePostedTime", commentAbsolutePostedTime);
                  	_ctx.include("war:/groovy/social/webui/activity/UIActivityCommentActions.gtmpl");
                  %>
                </div><!--end commentRight-->
                <div class="clearfix"></div>
                <%
                  def commentEditable = uicomponent.isActivityEditable(it);
                  def commentDeletable = uicomponent.isCommentDeletable(it.userId);
                  if(commentEditable || commentDeletable) {
                %>
                  <div id="dropDownEditComment${it.id}" class="btn-group uiDropdownWithIcon actLink">
                    <div class="dropdown-toggle" data-toggle="dropdown">
                      <i class="uiIconActivityAction uiIconLightGray">
                      </i>
                    </div>
                    <ul class="dropdown-menu pull-right" role="menu">
                  	  <% if(commentEditable) {%>
                        <li>
                  		  <a id="CommentActivitylink${it.id}" data-edit-comment="${it.id}" class="" href="javascript:void(0)">${labelEdit}</a>
                  		</li>
                  	  <%
                  	  }
                  	  if (commentDeletable) {
                  		String idDeleteComment = "DeleteCommentButton${it.id}";
                  	  %>
                        <li>
                          <a href="javascript:void(0)" id="$idDeleteComment" data-confirm="$labelToDeleteThisComment" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%= uicomponent.event("DeleteComment", uicomponent.id, it.id); %>"  class="controllDelete">${labelDelete}</a>
                  		</li>
                      <% } %>
                    </ul>
                  </div>
                <%}%>
              </div>
              </div>
            <% }) %>
        </div> <!--end commentlist-->
        <div class="inputContainer" id="InputContainer${activity.id}">
          <%
            def currentCommenterIdentity = uicomponent.getCommenterIdentity();
            def currentCommenterUri = LinkProvider.getUserProfileUri(currentCommenterIdentity.getRemoteId());
            def currentCommenterAvatar = currentCommenterIdentity.profile.avatarUrl;
            def currentCommenterName = StringEscapeUtils.escapeHtml(currentCommenterIdentity.profile.fullName);
            if (!currentCommenterAvatar) currentCommenterAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
          %>
          <% if (commentList.size() == 0) { %>
            <div class="commentItem noCommentFormBox" id="CommentFormBlock${activity.id}">
          <% } else { %>
            <div class="commentItem commentFormBox" id="CommentFormBlock${activity.id}">
          <% } %>
          <div class="commmentLeft">
            <a title="$currentCommenterName" href="$currentCommenterUri" class="avatarXSmall">
              <img alt="$currentCommenterName" src="$currentCommenterAvatar"/>
            </a>
          </div><!--end commentLeft-->
          <div class="commentRight">
            <div class="commentInputBox ">
              <div class="commentInput"><% uicomponent.renderChild(UIFormTextAreaInput.class); %></div>
              <button class="btn pull-left btn-primary" data-comment-button="${activity.id}" data-click="<%= uicomponent.event("PostComment", "COMMENTID") %>" id="CommentButton${activity.id}">$labelComment</button>
              <button class="btn visible-phone" id="CancelButton${activity.id}">$labelCancel</button>
            </div>
          </div><!--end commentRight-->
          <div class="clearfix"></div>
        </div> <!--end commentItem-->
      </div><!--end commentlist-->
    </div><!--end commentBox-->
    </div><!--end #ActivityContextBox${activity.id}-->
  </div> <!--end ContextBox${activity.id}-->
  </div> <!-- #boxContainer-->
  <% uiform.end() %>
</div><!--activityStream-->
<% } // News archived %>
<% } else { // Activity deleted %>
<% uiform.begin() %>
<div class="activityStream deleted">$labelActivityHasBeenDeleted</div>
<% uiform.end() %>
<% } %>
